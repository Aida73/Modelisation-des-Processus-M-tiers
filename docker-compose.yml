version: '3.8'


services:
  provider_db:
    image: postgres:12.1-alpine
    volumes:
      - postgres_provider_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${PROVIDER_USERNAME}
      POSTGRES_PASSWORD: ${PROVIDER_PASSWORD}
      POSTGRES_DB: provider_db
    restart: "on-failure"
    ports:
      - "5437:5432"
  
  client_db:
    image: postgres:12.1-alpine
    volumes:
      - postgres_client_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${CLIENT_USERNAME}
      POSTGRES_PASSWORD: ${CLIENT_PASSWORD}
      POSTGRES_DB: client_db
    restart: "on-failure"
    ports:
      - "5434:5432"

  rabbitmq:
    build:
      context: ./rabbitmq
      dockerfile: Dockerfile
    ports:
      - "5673:5672"
      - "15001:15672"
    environment:
      RABBITMQ_CONFIG_FILE: /etc/rabbitmq/rabbitmq.conf

  processus_client:
    build:
      context: ./processus_client
      dockerfile: Dockerfile
    ports:
      - "8001:8000"
    env_file:
      - .env
    depends_on:
      - client_db
      - rabbitmq
    restart: "on-failure"
    environment:
      DATABASE_URL: postgresql://${CLIENT_USERNAME}:${CLIENT_PASSWORD}@client_db/client_db
    

  processus_fournisseur:
    build:
      context: ./processus_fournisseur
      dockerfile: Dockerfile
    ports:
      - "8002:8000"
    env_file:
      - .env
    depends_on:
      - provider_db
      - rabbitmq
    restart: "on-failure"
    environment:
      DATABASE_URL: postgresql://${PROVIDER_USERNAME}:${PROVIDER_USERNAME}@provider_db/provider_db

  ui_frontend:
    build: 
      context: ./ui_frontend/ui_frontend
      dockerfile: Dockerfile
    ports:
      - "4200:80"
    depends_on:
      - processus_client
      - processus_fournisseur
  
  keycloak:
    image: quay.io/keycloak/keycloak:latest
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    ports:
      - "8085:8080"
    command:
    - start-dev

volumes:
  postgres_provider_data:
  postgres_client_data:
